#include <iostream>

struct A
{
     template<typename T>
     void operator()() const
     {

     }
};

auto main()->int
{
    auto sum = []<typename T, typename U>(const T& a, const U& b) {
         return a + b;
    };

    std::cout << sum(1, 1) << "," << sum(0.1, 1) << sum(2, 3) << std::endl;
    std::cout << sum.operator()<int, int>(1, 2) << std::endl;

    auto sum2 = [](auto&&... args) {
         return (args + ...);
    };

    std::cout << sum2(1, 1, 2.2) << "," << sum2(2, 4, 5.5, 5.5) << std::endl;

    //Explicit Specification of Lambda Template Parameters

    auto print_numbers = []<int n>() {
       for (int x = 0; x < n; ++x) {
          std::cout << x << ", ";
       }
    };
    /*
     code generated by compiler
     struct NameGivenByCompiler
     {
          template<int n>
          auto operator() () const {

          }
     };
    */

    print_numbers.operator()<10>();
    //this won't compile 
    //print_numbers<10>();
    return 0;
}
